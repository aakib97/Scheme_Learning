#lang racket
;;Problem 1
(define (square-pair n)(cons n (* n n)))
(square-pair 2)
;returns (2 . 4)
(square-pair 3)
;returns (3 . 9)
(square-pair 4)
;returns (4 . 16)

;;Problem 2
(define (square-l l)
 (define square (lambda (x) (* x x)))
 (if (null? l)
      '()
      (cons (square (car l)) (square-l (cdr l)))
 )
)
(define list1 (list 1 2 3 4 5))
(square-l list1)
;returns (1 4 9 16 25)
(define list2 (list 6 7 8 9 10))
(square-l list2)
;returns (36 49 64 81 100)

;;Problem 3
(define (range-helper p)(cons (car p) (cons (+ (car p) 1)(cdr p))))
(define (range p)
 (if (null? p)
     '()
     (if (= (car (cdr (range-helper p))) (cdr p))
         (list (car (range-helper p)) (cdr p))
         (cons (car (range-helper p))(range (cdr (range-helper p))))
     )
 )
)
(define p (cons 0 10))
(range p)
;returns (0 1 2 3 4 5 6 7 8 9 10)
(define p2 (cons 15 20))
(range p2)
;returns (15 16 17 18 19 20)

(define (range2 p)
 (define (helper x y z)
  (if (<= x y)
     (cons x (helper (+ 1 x) y z))
     '()
  )
 )
(helper (car p) (cdr p) p)
)
(range2 p)
;returns (0 1 2 3 4 5 6 7 8 9 10)
(range2 (cons 1 5))
;returns (1 2 3 4 5)

;;Problem 4
(define (sv-multi x a)
(define (multipler x a) (* a x))
 (if (null? x)
     '()
     (cons (multipler (car x) a) (sv-multi (cdr x) a))
 )
)

(define vector1 (list 1 5 6))
(sv-multi vector1 2)
;returns (2 10 12)
(define vector2 (list -5 12 3))
(sv-multi vector2 5)
;returns (-25 60 15)

;;Problem 5
(define (v-add v1 v2)
(define (addition a b) (+ a b))
 (if (null? (and v1 v2))
      '()
      (cons (addition (car v1) (car v2)) (v-add (cdr v1) (cdr v2)))
 )
)
(define vec1 (list 1 2 3))
(define vec2 (list 4 5 6))
(v-add vec1 vec2)
;returns (5 7 9)
(define vec3 (list 8 7 -4))
(define vec4 (list 2 -5 6))
(v-add vec3 vec4)
;returns (10 2 2)

;Problem 6
(define (dotproduct v1 v2)
 (if (null? (and v1 v2))
     '()
     (cons (* (car v1) (car v2)) (dotproduct (cdr v1) (cdr v2)))
 )
)  
(define vec5 (list 4 2 6))
(define vec6 (list 5 8 3))
(dotproduct vec5 vec6)
;returns (20 16 18)
(define vec7 (list 2 4 -2))
(define vec8 (list 2 -3 -8))
(dotproduct vec7 vec8)
;returns (4 -12 16)

;Problem 7
(define (cross x y)
 (if (null? (and x y))
     '()
      (cons (cons (car x) (car y)) (cross (cdr x) (cdr y)))
 )
)
(define vec9 (list 1 5 9))
(define vec10 (list 3 5 7))
(cross vec9 vec10)
;returns ((1 . 3) (5 . 5) (9 . 7))