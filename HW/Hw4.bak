#lang racket
;;Problem1
(define harmonic
 (lambda(n)
    (if (= n 0)
        0
        (/ 1 n)
    )
  )
)

(define (sum f n)
(if (= n 0)
(f 0)
(+ (f n) (sum f (- n 1)))))

(sum harmonic 1)
;returns 1
(sum harmonic 2)
;returns 1 1/2
(sum harmonic 3)
;returns 1 5/6

;;Problem2

(define (derivative f h)
 (lambda (x)
  (if (= h 0)
      0
      (/(-(f(+ x h))(f x))h)
  )
 )
)

(define square (lambda (x)(* x x)))

(derivative square .01)
;returns #<procedure>
((derivative square .01)2)
;returns 4.009, which is pretty close to 2x which is the derivative of x^2

(define (nthder f n h)
 (lambda (x)
   (nthder (derivative f h)(- n 1) h)
 )
)

(nthder square 2 .01)


;;Problem3
(define (newt-method f x0 n)
 (if (= n 0)
     x0
     (- (newt-method f x0 (- n 1))
        (/(f (newt-method f x0 (- n 1)))
          ((derivative f .01)(newt-method f x0 (- n 1)))))
 )
)

(define f1 (lambda (x) (+(* 2 x)1)))

(newt-method f1 2 2)

